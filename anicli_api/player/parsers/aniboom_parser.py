# autogenerated by ssc-gen DO NOT_EDIT

import re
import json
from typing import TypedDict, Union


from parsel import Selector, SelectorList

J_Dash = TypedDict(
    "J_Dash",
    {
        "src": str,
        "type": str,
    },
)
J_Hls = TypedDict(
    "J_Hls",
    {
        "src": str,
        "type": str,
    },
)
J_DataParameters = TypedDict(
    "J_DataParameters",
    {
        "id": str,
        "error": str,
        "domain": str,
        "cdn": str,
        "counter": str,
        "duration": str,
        "poster": str,
        "thumbnails": str,
        "dash": J_Dash,
        "hls": J_Hls,
        "quality": bool,
        "qualityVideo": int,
        "vast": bool,
        "country": str,
        "platform": str,
        "rating": str,
        "nshowbl": bool,
        "limitRate": bool,
        "aBlocklimitRate": bool,
    },
)
T_AniboomPage = TypedDict(
    "T_AniboomPage",
    {
        "data_parameters": J_DataParameters,
        "hls": str,
        "dash": str,
    },
)


class AniboomPage:
    """Extract MPD and M3U8 urls

        NOTE: use data_parameters instead hls and dash keys for get urls

        Required `referer="https://animego.org/` HEADER (.me, .club?)

        USAGE:
            1. GET <PLAYER_LINK> (e.g. https://aniboom.one/embed/6BmMbB7MxWO?episode=1&translation=30)
            2. PARSE. If pre-unescape response before parse - css selector may not find attribute
            3. For video playing, url required next headers:

            - Referer="https://aniboom.one/"
            - Accept-Language="ru-RU"  # INCREASE DOWNLOAD SPEED with this static value
            - Origin="https://aniboom.one"
        ISSUES:
            - 403 Forbidden if request sent not from CIS region
            - KEYS SHOULD BE STARTED IN Title Case else hls/mpd links returns 403 error
            - Sometimes, aniboom backend missing MPD key and returns M3U8 url. Check this value before usage:

            https://github.com/vypivshiy/ani-cli-ru/issues/29

            Expected json signature (LOOK at dash.src and hls.src keys):

            { ...
            "dash":"{"src":"https:.../abcdef.mpd",        "type":"application\\/dash+xml"}",
            "hls":"{"src":"https:...\\/master_device.m3u8",
            "type":"application\\/x-mpegURL"}"

            ... }

            MAYBE returns this:

             { ...
            "dash":"{"src":"https:...master_device.m3u8",        "type":"application\\/dash+xml"}",
            "hls":"{"src":"https:...master_device.m3u8",
            "type":"application\\/x-mpegURL"}"

            ... }


    {
        "data_parameters": {
            "id": "String",
            "error": "String",
            "domain": "String",
            "cdn": "String",
            "counter": "String",
            "duration": "String",
            "poster": "String",
            "thumbnails": "String",
            "dash": {
                "src": "String",
                "type": "String"
            },
            "hls": {
                "src": "String",
                "type": "String"
            },
            "quality": "Bool",
            "qualityVideo": "Int",
            "vast": "Bool",
            "country": "String",
            "platform": "String",
            "rating": "String",
            "nshowbl": "Bool",
            "limitRate": "Bool",
            "aBlocklimitRate": "Bool"
        },
        "hls": "String",
        "dash": "String"
    }"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _parse_data_parameters(self, v: Union[Selector, SelectorList]) -> J_DataParameters:
        v0 = v.css("#video[data-parameters]")
        v1 = v0.attrib["data-parameters"]
        v2 = v1.replace("\\", "")
        v3 = v2.replace("&quot;}", "}")
        v4 = v3.replace("&quot;{", "{")
        v5 = v4.replace("&quot;", '"')
        v6 = v5.replace('}"', "}")
        v7 = v6.replace('"{', "{")
        return json.loads(v7)

    def _parse_hls(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css("#video")
        v1 = v0.attrib["data-parameters"]
        v2 = v1.replace("\\", "")
        v3 = v2.replace("&quot;", '"')
        return re.search(r'"hls":"{"src":"(https?.*?\.m3u8)"', v3)[1]

    def _parse_dash(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css("#video[data-parameters]")
        v1 = v0.attrib["data-parameters"]
        v2 = v1.replace("\\", "")
        v3 = v2.replace("&quot;", '"')
        return re.search(r'"dash":"{"src":"(https?.*?\.(?:mpd|m3u8))"', v3)[1]

    def parse(self) -> T_AniboomPage:
        return {
            "data_parameters": self._parse_data_parameters(self._document),
            "hls": self._parse_hls(self._document),
            "dash": self._parse_dash(self._document),
        }
